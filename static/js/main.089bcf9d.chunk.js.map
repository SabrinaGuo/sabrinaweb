{"version":3,"sources":["component/menu.js","component/gotop.js","Indexpage.js","serviceWorker.js","index.js"],"names":["menuList","Menu","MenuStyle","map","item","idx","key","href","styled","div","length","Gotop","props","React","useState","showBtn","setShowbtn","winHeight","useRef","selfHeight","nowTop","window","scrollY","prevTop","useEffect","addEventListener","scrollFc","removeEventListener","pos","current","document","body","getBoundingClientRect","height","Gotopdiv","style","showGoTopBtn","onClick","scrollTo","top","behavior","animationDuration","children","defaultProps","Indexpage","BodyStyle","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uiDAIA,IAAMA,EAAW,CAAC,YAAa,SAAU,UAAW,UAqBrCC,EAlBF,WACT,OACI,kBAACC,EAAD,KACI,4BAEQF,EAASG,KAAI,SAACC,EAAMC,GAChB,OACI,wBAAIC,IAAKD,GACL,uBAAGE,KAAK,IAAIH,UAYtCF,EAAYM,IAAOC,IAAV,IAYsBT,EAASU,Q,wlBCnC9C,IAAMC,EAAQ,SAAAC,GAAU,IAAD,EACWC,IAAMC,UAAS,GAD1B,mBACZC,EADY,KACHC,EADG,KAGbC,EAAYJ,IAAMK,OAAO,MACzBC,EAAaN,IAAMK,OAAO,MAC5BE,EAA2B,qBAAXC,OAAyBA,OAAOC,QAAU,EACxDC,EAAUV,IAAMK,OAAOE,GAG7BP,IAAMW,WAAU,WAEd,OADAH,OAAOI,iBAAiB,SAAUC,GAC3B,WACLL,OAAOM,oBAAoB,SAAUD,MAEtC,IACH,IAMMA,EAAW,WACfN,EAASC,OAAOC,QAChB,IAAMM,EAAML,EAAQM,QAAUT,EAAS,EAElCH,EAAUY,UACXZ,EAAUY,QAAUC,SAASC,KAAKC,wBAAwBC,OAC1Dd,EAAWU,QAA8B,EAApBZ,EAAUY,SAG/BD,GAAOR,EAASD,EAAWU,QAC7Bb,GAAW,GAEXA,GAAW,GAEbO,EAAQM,QAAUT,GAGpB,OACE,kBAACc,EAAD,CAAUC,MAAO,CAAEC,aAAcrB,GAAWsB,QAxBhC,WACZhB,OAAOiB,SAAS,CACdC,IAAK,EACLC,SAAU5B,EAAM6B,sBAsBf7B,EAAM8B,WAIb/B,EAAMgC,aAAe,CACnBF,kBAAmB,QAKrB,IAAMP,EAAW1B,IAAOC,IAAV,KAaD,SAACG,GAAD,OACTA,EAAMuB,MAAMC,aAAe,QAAU,UAe1BzB,I,6HCpEFiC,MATf,WACE,OACE,kBAACC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOJ,kBAAmB,UAAU,0CAOpCI,EAAYrC,IAAOC,IAAV,KCLKqC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASuB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.089bcf9d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst menuList = ['introduce', 'skills', 'myworks', 'others'];\r\n\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <MenuStyle>\r\n            <ul>\r\n                {\r\n                    menuList.map((item, idx) => {\r\n                        return (\r\n                            <li key={idx} >\r\n                                <a href=\"\">{item}</a>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </ul>\r\n        </MenuStyle>\r\n    )\r\n}\r\nexport default Menu;\r\n\r\nconst MenuStyle = styled.div`\r\n    width:100%;\r\n    ul{\r\n        max-width:1200px;\r\n        width:100%;\r\n        padding:0;\r\n        margin:0 auto;\r\n        display:flex;\r\n        justify-content:center;\r\n        align-items: center;\r\n        flex-wrap:wrap;\r\n        li{\r\n            max-width:calc((100% / ${menuList.length}) - 20px);\r\n            margin:0 10px;\r\n            width:100%;\r\n            list-style-type:none;\r\n            text-align:center;\r\n            background-color:#7bbff4;\r\n            border-radius:32px 32px 0 0;\r\n            border:3px solid #fff;\r\n            transition:all 0.3s;\r\n            box-sizing:border-box;;\r\n            a{\r\n                width:100%;\r\n                display:block;\r\n                padding:15px 0;\r\n                font-size:20px;\r\n                color:#fff;\r\n                text-decoration:none;\r\n                transition:all 0.3s;\r\n            }\r\n             &:hover{\r\n                background-color:#fff;\r\n                border:3px solid #7bbff4;\r\n                 a{\r\n                     color:#7bbff4;\r\n                 }\r\n            }\r\n        }\r\n    }\r\n    @media (max-width: 768px) {\r\n        ul{\r\n            padding-top:70px;\r\n            li{\r\n                max-width:100%;\r\n                border-radius:0;\r\n            }\r\n        }\r\n    }\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Gotop = props => {\r\n    const [showBtn, setShowbtn] = React.useState(false); //控制顯示隱藏\r\n    //優化\r\n    const winHeight = React.useRef(null);\r\n    const selfHeight = React.useRef(null);\r\n    let nowTop = typeof window !== \"undefined\" ? window.scrollY : 0;\r\n    const prevTop = React.useRef(nowTop);\r\n  \r\n    // 監聽滾動事件\r\n    React.useEffect(() => {\r\n      window.addEventListener(\"scroll\", scrollFc);\r\n      return () => {\r\n        window.removeEventListener(\"scroll\", scrollFc);\r\n      };\r\n    }, []);\r\n    const gotop = () => {\r\n      window.scrollTo({\r\n        top: 0,\r\n        behavior: props.animationDuration\r\n      });\r\n    };\r\n    const scrollFc = () => {\r\n      nowTop = window.scrollY;\r\n      const pos = prevTop.current - nowTop > 0; //下:False 上:Ture\r\n  \r\n      if (!winHeight.current) {\r\n          winHeight.current = document.body.getBoundingClientRect().height;\r\n          selfHeight.current = winHeight.current * 0;\r\n      }\r\n  \r\n      if (pos && nowTop > selfHeight.current) {\r\n        setShowbtn(true);\r\n      } else {\r\n        setShowbtn(false);\r\n      }\r\n      prevTop.current = nowTop;\r\n    };\r\n  \r\n    return (\r\n      <Gotopdiv style={{ showGoTopBtn: showBtn }} onClick={gotop}>\r\n        {props.children}\r\n      </Gotopdiv>\r\n    );\r\n  };\r\n  Gotop.defaultProps = {\r\n    animationDuration: \"auto\"\r\n  };\r\n  \r\n  \r\n  // css\r\n  const Gotopdiv = styled.div`\r\n    position: fixed;\r\n    bottom: 50px;\r\n    right: 50px;\r\n    color: #343434;\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n    background-color:#fff;\r\n    border:2px solid #7bbff4;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    text-align: center;\r\n    display: ${(props) =>\r\n      props.style.showGoTopBtn ? \"block\" : \"none\"};\r\n    span {\r\n      line-height: 60px;\r\n      color: #7bbff4;\r\n    }\r\n    &:hover {\r\n      background-color: #7bbff4;\r\n      span {\r\n        color: #fff;\r\n      }\r\n    }\r\n    @media (max-width: 768px) {\r\n      right: 20px;\r\n    }\r\n  `;\r\n  export default Gotop;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport Menu from './component/menu';\nimport Gotop from './component/gotop';\n\nfunction Indexpage() {\n  return (\n    <BodyStyle>\n      <Menu />\n      <Gotop animationDuration={\"smooth\"}><span>GOTOP</span></Gotop>\n    </BodyStyle>\n  );\n}\n\nexport default Indexpage;\n\nconst BodyStyle = styled.div`\n  height:500vh;\n  overflow-x:hidden;\n  width:100%;\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Indexpage from './Indexpage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Indexpage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}